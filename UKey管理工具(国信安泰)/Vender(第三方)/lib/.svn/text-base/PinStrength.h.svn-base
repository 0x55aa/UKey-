
#pragma once


class CPinStrength
{
public:
	enum
	{
		STRENTH_EMPTY = 0,   // 空
		STRENTH_STRONG,      // 强
		STRENTH_MEDIUM,		 // 中
		STRENTH_WEAK,		 // 弱
		STRENTH_UNAVAILABLE, // 不可用
	};

	static bool IsNum(int ch)	
	{
		return (ch >='0' && ch <= '9');
	}

	static bool IsUpperChar(int ch)	
	{
		return (ch >='A' && ch <= 'Z');
	}

	static bool IsLowerChar(int ch)	
	{
		return (ch >='a' && ch <= 'z');
	}

	static int GetStrength(int nLen, LPBYTE pbPIN) 
	{
		if(nLen < ONKEY_USE_PIN_MIN_LEN) // 建行长度小于3的密码不能用
		{
			return STRENTH_UNAVAILABLE;
		}

		bool bIs2CharContinue = true; // 11223344 - 双连号连续
		bool bIs2CharReverseContinue = true; // 44223311 - 双连号连续

		bool bIsContinue = true; // 12345678,
		bool bIsReverseContinue = true; // 87654321

		DWORD dwCachePinLen = 0;
		LPBYTE pbCacheBuf = new BYTE[nLen];
		memset(pbCacheBuf, 0x00, nLen);

		pbCacheBuf[0] = pbPIN[0];
		dwCachePinLen++;

		int i = 0;

		DWORD j = 0;

		for(i = 1; i < nLen; i++)
		{
			for(j=0; j<dwCachePinLen; j++)
			{
				if(pbCacheBuf[j] == pbPIN[i])
				{
					break;
				}
			}

			if(j == dwCachePinLen)
			{
				pbCacheBuf[j] = pbPIN[i];
				dwCachePinLen++;
			}

			// 
			if( (i+1) < nLen)
			{
				bIsContinue &= ( 1 == (pbPIN[i+1] - pbPIN[i]) ) ;//连续的
			}

			if( (i+1) < nLen)
			{
				bIsReverseContinue &= ( 1 == (pbPIN[i] - pbPIN[i+1]) ) ;//连续的
			}

			// 双连号需要两个条件
			if( 0 == ( (i+1)/2 )) // 每两个字符一样
			{
				bIs2CharContinue &= (pbPIN[i-1] ==  pbPIN[i] );
			}
			if( ( 1 == ( (i+1)%2 ) ) && ( (i+1) > 2 ) &&((i+2) <nLen) ) // 间2隔，差值为1
			{
				bIs2CharContinue &= ( 1 == (pbPIN[i+2] - pbPIN[i]) ) ;
			}
			if( ( i > 1 ) && ( (i+1) < nLen) )
			{
				bIs2CharContinue &= ( pbPIN[i+1] >=  pbPIN[i] ) ;
			}

			// 双连号需要两个条件
			if( 0 == ( (i+1)/2 )) // 每两个字符一样
			{
				bIs2CharReverseContinue &= (pbPIN[i-1] ==  pbPIN[i] );
			}
			if( ( 1 == ( (i+1)%2 ) ) && ( (i+1) > 2 ) &&((i+2) <nLen)  ) // 间2隔，差值为1
			{
				bIs2CharReverseContinue &= ( 1 == (pbPIN[i] - pbPIN[i+2]) ) ; // 间隔1
			}
			if( ( i >= 1 ) && ( (i+1) < nLen) )
			{
				bIs2CharReverseContinue &= ( pbPIN[i] >= pbPIN[i+1] );
			}
		}

		if(pbCacheBuf)
		{
			delete [] pbCacheBuf;
		}

		if( bIsContinue || bIsReverseContinue || bIs2CharContinue || bIs2CharReverseContinue)//相同或连续的字符
		{
			return STRENTH_UNAVAILABLE;
		}

		return (dwCachePinLen >= 3) ? STRENTH_STRONG : STRENTH_UNAVAILABLE;
	}

#ifdef __AFXSTR_H__
	static int GetStrength(LPTSTR pszPasswd) 
	{
		CStringA strPin(pszPasswd);
		return GetStrength(strPin.GetLength() , (LPBYTE)strPin.GetBuffer() );
	}
#endif

};
