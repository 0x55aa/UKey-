/*
  Copyright (c) 2005-2008, Dominik Reichl <dominik.reichl@t-online.de>
  All rights reserved.
*/
/////////////////////////////////////////////////////////////////////////////
// For version history see the source file.

#if !defined(AFX_SECUREEDITEX_H__83B26DEE_A42E_11D9_BF17_0050BF14F5CC__INCLUDED_)
#define AFX_SECUREEDITEX_H__83B26DEE_A42E_11D9_BF17_0050BF14F5CC__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

/////////////////////////////////////////////////////////////////////////////

#ifndef TCH_STDPWCHAR
#define TCH_STDPWCHAR _T('*')
#endif

#ifndef SE_XORPAD_SIZE
#define SE_XORPAD_SIZE 32
#endif

#include "afxole.h"

class CSecureDropTarget;

class CSecureEditEx : public CEdit
{
// Construction
public:
	CSecureEditEx();
	virtual ~CSecureEditEx();

	void InitEx();

	void EnableSecureMode(BOOL bEnable = TRUE);
	BOOL IsSecureModeEnabled();

	// Retrieve the currently entered password
	LPTSTR GetPassword();

	// Securely free the passwords returned by GetPassword()
	static void DeletePassword(LPTSTR lpPassword);

	// Set the currently entered password, may be NULL
	void SetPassword(LPCTSTR lpPassword);

	//{{AFX_VIRTUAL(CSecureEditEx)
	//}}AFX_VIRTUAL

private:
	void _DeleteAll();
	void _ClearSelection();
	void _InsertCharacters(unsigned int uPos, LPCTSTR lpSource, unsigned int uNumChars);
	void _DeleteCharacters(unsigned int uPos, unsigned int uCount);
	void _EncryptBuffer(BOOL bEncrypt = TRUE);

	BOOL _RegisterDropTarget();
	void _Paste(LPCTSTR lpSource);

private:
	BOOL m_bSecMode;
	LPTSTR m_pXorPad;
	CPtrArray m_apChars;
	int m_nOldLen;

	int m_nMaxPinLen;
	int m_nMinPinLen;

	CSecureDropTarget* m_pSecDrop;

	UINT_PTR m_nTimer;

public:
	void SetPinLen(int max, int min);
	static LPTSTR AllocMemory(size_t uCount);
	static void SetMemoryEx(void *pDest, int c, size_t uCount);
	static void DeleteTPtr(LPTSTR lp, BOOL bIsArray, BOOL bIsString);

protected:
	//{{AFX_MSG(CSecureEditEx)
	afx_msg void OnEnUpdate();
	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnDeadChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnMouseMove(UINT nFlags, CPoint point);
	afx_msg void OnLButtonDblClk(UINT nFlags, CPoint point);
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnMButtonDblClk(UINT nFlags, CPoint point);
	afx_msg void OnMButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnRButtonDblClk(UINT nFlags, CPoint point);
	afx_msg void OnRButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnRButtonDown(UINT nFlags, CPoint point);
	afx_msg void OnSetFocus();
	afx_msg void OnSetFocus(CWnd* pOldWnd);
	afx_msg void OnKillFocus(CWnd* pNewWnd);
	afx_msg void OnTimer(UINT_PTR nIDEvent);
	afx_msg LRESULT OnPadInputKey(WPARAM wp, LPARAM lp);
	//}}AFX_MSG

	DECLARE_MESSAGE_MAP()
};

/////////////////////////////////////////////////////////////////////////////

class CSecureDropTarget : public COleDropTarget
{
public:
	CSecureDropTarget(CSecureEditEx* pControl);

private:
	CSecureEditEx* m_pControl;

protected:
	// Implement COleDropTarget
	virtual DROPEFFECT OnDragEnter(CWnd* pWnd, COleDataObject* pDataObject,
		DWORD dwKeyState, CPoint point);
	virtual DROPEFFECT OnDragOver(CWnd* pWnd, COleDataObject* pDataObject,
		DWORD dwKeyState, CPoint point);
	virtual BOOL OnDrop(CWnd* pWnd, COleDataObject* pDataObject,
		DROPEFFECT dropEffect, CPoint point);
};

/////////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}

#endif // !defined(AFX_SECUREEDITEX_H__83B26DEE_A42E_11D9_BF17_0050BF14F5CC__INCLUDED_)


// init(drop)
//m_edit1.InitEx(); // “¿¿µOLE£¨±ÿ–Îœ»÷¥––AfxInitOle
// get password
//LPTSTR ptrKey = m_edit1.GetPassword();
//m_edit1.DeletePassword(ptrKey);

