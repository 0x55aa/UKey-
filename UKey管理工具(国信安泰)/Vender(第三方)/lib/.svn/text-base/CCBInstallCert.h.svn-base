#ifndef __CCB_INSTALL_CERT_H__

#define __CCB_INSTALL_CERT_H__

#include "Base64EnDecode.h"
#include "OnKeyPreDef.h"
#include <atlstr.h>

#include <WinCrypt.h>
#pragma comment(lib, "Crypt32.lib")

class CCB_InstallP7Cert
{
	//------------------------------------------------------
	// 函数：FilterP10Header
	//       过滤PKCS10，PEM头
	// 参数： strP10 - 输入输出参数，CStringA类型
	//------------------------------------------------------
	static void FilterP10Header(CStringA &strP10)
	{
		LPCSTR psHeader =  "-----BEGIN CERTIFICATE REQUEST-----";
		LPCSTR psEnd =  "-----END CERTIFICATE REQUEST-----";

		int nHeadPos = strP10.Find(psHeader) , nEndPos = strP10.Find(psEnd);
		if( nHeadPos >= 0 && nEndPos > nHeadPos)
		{
			strP10.Delete(nEndPos, strP10.GetLength() - nEndPos);
			strP10.Delete(0, nHeadPos+lstrlenA(psHeader));
		}
	}


	//------------------------------------------------------
	// 函数：Base64P10Decode
	//       Base64解码
	// 参数： psBase64P10 - 输入参数，Base64编码的PKCS10
	//        dwP10Len    - 输入参数，PKCS10长度
	//        pbRetP10    - 输出参数，返回PKCS10字节流
	//        pdwRetP10Len- 输出参数，返回PKCS10字节流长度
	//------------------------------------------------------
	static BOOL Base64P10Decode(LPCSTR psBase64P10, DWORD dwP10Len, LPBYTE pbRetP10, LPDWORD pdwRetP10Len)
	{
	#define CRYPT_DLL_NAME	TEXT("Crypt32.dll")
		// 函数指针
		typedef BOOL (WINAPI *(pfnCryptStringToBinaryA) )(LPCSTR pszString , DWORD cchString ,
			DWORD dwFlags ,
			BYTE *pbBinary ,DWORD *pcbBinary ,
			DWORD *pdwSkip ,DWORD *pdwFlags 
			);

		// 加载Crypt32.dll 
		HMODULE hMod = ::LoadLibrary( CRYPT_DLL_NAME );

		// 获取函数地址
		pfnCryptStringToBinaryA fnCryptStringToBinary = (pfnCryptStringToBinaryA)::GetProcAddress(hMod, "CryptStringToBinaryA");

		// 如果找不到函数,则调用自定义的Base64编码解码的接口
		if(NULL == fnCryptStringToBinary)
		{
			CStringA strBase64P10(psBase64P10);
			FilterP10Header(strBase64P10);

			int nRet = Base64::decode(NULL, strBase64P10.GetLength(),  NULL);

			if(pbRetP10 == NULL || *pdwRetP10Len < (DWORD)nRet) 
			{
				*pdwRetP10Len = nRet;
				return FALSE;
			}

			nRet = Base64::decode(strBase64P10, strBase64P10.GetLength(),  pbRetP10);
			if(nRet > 0)
			{
				*pdwRetP10Len = (DWORD)nRet;
				return TRUE;
			}
			return FALSE;
		}
		else
		{
			DWORD dwEncodedBinaryLen = 0;  // P10长度
			DWORD dwFlags = CRYPT_STRING_ANY;

			BOOL bRet = fnCryptStringToBinary( psBase64P10, 
				dwP10Len, 
				CRYPT_STRING_ANY, 
				NULL, 
				&dwEncodedBinaryLen, 
				NULL, 
				&dwFlags );

			if( NULL == pbRetP10 || *pdwRetP10Len < dwEncodedBinaryLen)
			{
				*pdwRetP10Len = dwEncodedBinaryLen;
				return FALSE;
			}

			if(bRet && dwEncodedBinaryLen)
			{
				bRet = fnCryptStringToBinary( psBase64P10 , 
					dwP10Len, 
					CRYPT_STRING_ANY, 
					pbRetP10, 
					pdwRetP10Len, 
					NULL, 
					&dwFlags);

			}
			return bRet;
		}
	}

	//------------------------------------------------------
	//  解析证书内的公钥
	//	pbCertData       - 证书数据
	//  dwCertDataLen    - 证书长度
	//  pbPublicKeyN     - 公钥
	//  pdwPublicKeyNLen - 公钥长度
	//------------------------------------------------------
	static int GetCertPublicKeyN(LPBYTE pbCertData, DWORD dwCertDataLen, LPBYTE pbPublicKeyN, LPDWORD pdwPublicKeyNLen)
	{
		PCCERT_CONTEXT pCertInfo = CertCreateCertificateContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, pbCertData, dwCertDataLen);
		if (pCertInfo)
		{
			if (pCertInfo->pCertInfo->SubjectPublicKeyInfo.PublicKey.cbData <= 0x8F)//1024
			{
				memcpy(pbPublicKeyN, pCertInfo->pCertInfo->SubjectPublicKeyInfo.PublicKey.pbData+7, 128);
				*pdwPublicKeyNLen = 128;
			}
			else//2048
			{
				memcpy(pbPublicKeyN, pCertInfo->pCertInfo->SubjectPublicKeyInfo.PublicKey.pbData+9, 256);
				*pdwPublicKeyNLen = 256;
			}
			CertFreeCertificateContext(pCertInfo);

			return 1;
		}

		return 0;
	}


public:
	// 字节逆转
	static void ByteReverse(LPBYTE data, DWORD num)
	{
		for (LPBYTE q = data, p=data+num-1; q < p; q++, p--)
		{
			BYTE t = *q;
			*q = *p;
			*p = t;
		}
	}

	// 
	// 解析PKCS7获取证书, 枚举容器、导出公钥，核对公钥，并导入证书, 
	//
	static bool InstallCertP7(char *psBase64P7, int dwP7Len, int * pnRet = NULL, HWND hwnd = NULL)
	{
		bool bRet = TRUE;
		LPBYTE pbaCertData = NULL;
		DWORD dwCertDataLen = 0;
		HCRYPTMSG hMsg = NULL;
		int nRetError = 0;

		// 
		// 解码Base64编码的P7
		//
		LPBYTE pbEncodedBinary = NULL; // 二进制编码的P7
		DWORD dwEncodedBinaryLen = 0;  // P7长度

		LogEntry("InstallCertP7 enter...", "psBase64P7=%s, dwP7Len=%d", psBase64P7, dwP7Len);

		Base64P10Decode(psBase64P7, dwP7Len, NULL, &dwEncodedBinaryLen); // 获取长度

		LogEntry("InstallCertP7 Base64P10Decode", "dwEncodedBinaryLen=%d", dwEncodedBinaryLen);

		if(dwEncodedBinaryLen)
		{
			pbEncodedBinary = new BYTE [dwEncodedBinaryLen];
			RtlZeroMemory(pbEncodedBinary, dwEncodedBinaryLen);

			if( !Base64P10Decode(psBase64P7, dwP7Len, pbEncodedBinary, &dwEncodedBinaryLen) )
			{
				bRet = false;
				nRetError =  CCB_FF_PRARAM_ERROR;
				goto leave;
			}
		}
		else
		{
			nRetError = CCB_FF_PRARAM_ERROR;

			bRet = false;
			goto leave;
		}

  		hMsg = CryptMsgOpenToDecode(X509_ASN_ENCODING|PKCS_7_ASN_ENCODING, 0, 0, NULL, NULL, NULL);

		LogEntry("InstallCertP7 CryptMsgOpenToDecode", "hMsg=%p", hMsg);

		if( !CryptMsgUpdate(hMsg, pbEncodedBinary, dwEncodedBinaryLen, TRUE) )
		{
			bRet = false;
			nRetError = CCB_FF_PRARAM_ERROR;
			goto leave;
		}

		dwCertDataLen = dwEncodedBinaryLen+0x400;
		pbaCertData = new BYTE[dwCertDataLen];
		
		RtlZeroMemory(pbaCertData, dwCertDataLen);

		LPDWORD pdwCertCount = (LPDWORD)pbaCertData;
		DWORD dwOffset = 0;
		DWORD dwBufferLen = dwCertDataLen - dwOffset;

		if( !CryptMsgGetParam(hMsg, CMSG_CERT_COUNT_PARAM, 0, pbaCertData, &dwBufferLen) )
		{
			bRet = false;
			nRetError = CCB_FF_PRARAM_ERROR;
			goto leave;
		}
		
		dwOffset += dwBufferLen;
		dwBufferLen = dwCertDataLen - dwOffset;

		DWORD i;
		for(i=0; i<(*pdwCertCount); i++)
		{
			if( !CryptMsgGetParam(hMsg, CMSG_CERT_PARAM, i, pbaCertData+dwOffset+( (i+1)*sizeof(DWORD) ), &dwBufferLen) )
			{
				break;
			}

			memcpy(pbaCertData + dwOffset + (i*sizeof(DWORD)), (LPBYTE)&dwBufferLen,sizeof(DWORD));

			dwOffset += dwBufferLen;
			dwBufferLen = dwCertDataLen - dwOffset;
		}

		if(hMsg)
		{
			::CryptMsgClose(hMsg);
			hMsg = NULL;
		}


		//
		// pbaCertData 存储了证书链
		// 存储方式: 证书个数(4个字节) + { 第一个证书长度(4个字节) + 第一个证书数据 } + {.....}
		// 

		// 
		// 可以采取其他方法 准确定位哪一份证书是要写入Key中的，暂时先采用 公钥匹配的方式
		// 

		// 
		// 枚举所有容器，逐个匹配公钥
		// 匹配上之后，然后采用SetKeyParam,写入证书
		//

		BYTE baCtnNameData[2048] = {0};
		BYTE baPubKeyBlob[2048] = {0};
		DWORD dwPubLen = 0, dwDataLen = 0;

		DWORD dwGetProvParamFlag = CRYPT_FIRST;

		HCRYPTPROV hProv = 0;
		HCRYPTPROV hProvSub = 0;
		HCRYPTKEY hUserKey;

		if( !CryptAcquireContextA(&hProv, NULL, ONKEY_CSP_PROV_NAME, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT|CRYPT_SILENT ) )
		{
			LogEntry("InstallCertP7 CryptAcquireContextA return false", "hProv=%p", hProv);

			bRet = false;
			nRetError = CCB_FF_NOT_FIND_DEVICE;
			goto leave;
		}

		for( i = 0 ; ; )
		{
			dwDataLen = 2048;

			if( !CryptGetProvParam(hProv, PP_ENUMCONTAINERS, baCtnNameData, &dwDataLen, dwGetProvParamFlag) )
			{
				if(ERROR_NO_MORE_ITEMS != GetLastError() )
				{
				}
				bRet = false;

				LogEntry("InstallCertP7 CryptGetProvParam return false", 
					"GetLastError=%d, dwGetProvParamFlag=%d, baCtnNameData=%s,dwDataLen=%d ", GetLastError(), dwGetProvParamFlag, baCtnNameData, dwDataLen);

				nRetError = CCB_FF_NOT_FIND_DEVICE;
				break;
			}

			dwGetProvParamFlag = 0;

			// 打开容器
			if(!CryptAcquireContextA(&hProvSub, (const char *)baCtnNameData, ONKEY_CSP_PROV_NAME, PROV_RSA_FULL, 0))
			{
				continue;
			}

			if(!CryptGetUserKey(hProvSub, AT_KEYEXCHANGE, &hUserKey))
			{
				if(!CryptGetUserKey(hProvSub, AT_SIGNATURE, &hUserKey))
				{
					CryptReleaseContext(hProvSub, 0);
					continue ; //找下一容器
				}
			}

			dwPubLen = sizeof(baPubKeyBlob);

			if(!CryptExportKey(hUserKey, NULL, PUBLICKEYBLOB, 0, baPubKeyBlob, &dwPubLen))
			{
				LogEntry("InstallCertP7 CryptExportKey return false", "GetLastError=%d", GetLastError());

				bRet = false;
				nRetError = CCB_FF_NOT_FIND_DEVICE;
				break;
			}

			LPBYTE pbRsaPubKeyN = baPubKeyBlob + sizeof(BLOBHEADER) + sizeof(RSAPUBKEY);
			
			pdwCertCount = (LPDWORD)pbaCertData;
			DWORD dwCertLen = 0, offset = sizeof(DWORD);
			LPBYTE pbSingleCertData = NULL;

			BYTE baCertPubKeyN[2048] = {0};
			DWORD dwCertPubKeyLen = sizeof(baCertPubKeyN);

			BOOL bIsExist = false;

			for(DWORD j=0; j<(*pdwCertCount); j++)
			{
				memcpy((LPBYTE)&dwCertLen, pbaCertData + offset, sizeof(DWORD) );
				offset += sizeof(DWORD);

				pbSingleCertData = pbaCertData + offset;
				offset += dwCertLen;

	/* 用Key内部的证书覆盖测试
				pbSingleCertData = (LPBYTE)"\x30\x82\x05\x2e\x30\x82\x04\x16\xa0\x03\x02\x01\x02\x02\x01\x01\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x30\x81\xa8\x31\x12\x30\x10\x06\x03\x55\x04\x06\x0c\x09\xe4\xb8\xad\xe5\x9b\xbd\x00\x00\x00\x31\x12\x30\x10\x06\x03\x55\x04\x08\x0c\x09\xe5\x8c\x97\xe4\xba\xac\x00\x00\x00\x31\x16\x30\x14\x06\x03\x55\x04\x07\x0c\x0d\xe5\x8c\x97\xe4\xba\xac\xe5\xb8\x82\x00\x00\x00\x00\x31\x36\x30\x34\x06\x03\x55\x04\x0a\x0c\x2d\xe5\x8c\x97\xe4\xba\xac\xe5\xa4\xa9\xe5\x9c\xb0\xe8\x9e\x8d\xe7\xa7\x91\xe6\x8a\x80\xe6\x9c\x89\xe9\x99\x90\xe5\x85\xac\xe5\x8f\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x16\x30\x14\x06\x03\x55\x04\x0b\x0c\x0d\xe6\xb5\x8b\xe8\xaf\x95\xe9\x83\xa8\x00\x00\x00\x00\x31\x16\x30\x14\x06\x03\x55\x04\x03\x0c\x0d\x54\x65\x6e\x2d\x54\x65\x73\x74\x2d\x43\x41\x32\x00\x30\x1e\x17\x0d\x31\x31\x30\x36\x31\x34\x30\x31\x35\x31\x31\x38\x5a\x17\x0d\x32\x31\x30\x36\x31\x31\x30\x31\x35\x31\x31\x38\x5a\x30\x71\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x43\x4e\x31\x0b\x30\x09\x06\x03\x55\x04\x08\x13\x02\x42\x4a\x31\x12\x30\x10\x06\x03\x55\x04\x0a\x13\x09\x67\x72\x61\x6e\x64\x72\x6f\x6c\x65\x31\x10\x30\x0e\x06\x03\x55\x04\x0b\x13\x07\x64\x65\x76\x65\x6c\x6f\x70\x31\x12\x30\x10\x06\x03\x55\x04\x03\x13\x09\x74\x65\x6e\x2d\x74\x65\x73\x74\x31\x31\x1b\x30\x19\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x09\x01\x16\x0c\x74\x65\x73\x74\x40\x74\x65\x6e\x2e\x63\x6f\x6d\x30\x81\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x81\x8d\x00\x30\x81\x89\x02\x81\x81\x00\xd5\x91\x2d\x76\xf8\x01\x9c\x1e\xab\x74\x93\x0c\x72\x74\xa0\x28\x2b\xfa\xd8\x6e\x9c\x4c\x85\x23\x7a\x8f\x66\x23\xe9\x54\xe1\xca\xc9\x7d\xfb\xeb\x1a\xd6\x13\x59\x7e\xed\xc9\x6f\xfe\x91\x8f\xa7\xd3\x79\xfe\xf3\x06\x0e\x5f\xf7\x9b\x93\xa4\x92\x0e\x75\xaf\x67\x9f\x73\x8d\xb8\xe1\x39\x82\xca\x7a\x91\xf6\x5a\xde\x4c\x97\x02\x29\x3e\x4a\xab\x72\xa2\x16\xc4\x52\xca\xe5\x72\x5d\xca\x5c\x12\x80\x59\xcc\xb1\xb9\x93\xb1\x4e\x29\x43\x4d\xd5\xd9\xe0\xce\xe6\xc4\x5d\xe9\x26\xd1\x8b\xe0\xfc\x13\x2f\xcf\x8d\x16\x05\x97\x7b\x02\x03\x01\x00\x01\xa3\x82\x02\x1b\x30\x82\x02\x17\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x04\xf0\x30\x44\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x09\x0f\x04\x37\x30\x35\x30\x0e\x06\x08\x2a\x86\x48\x86\xf7\x0d\x03\x02\x02\x02\x04\x00\x30\x0e\x06\x08\x2a\x86\x48\x86\xf7\x0d\x03\x04\x02\x02\x08\x00\x30\x07\x06\x05\x2b\x0e\x03\x02\x07\x30\x0a\x06\x08\x2a\x86\x48\x86\xf7\x0d\x03\x07\x30\x1d\x06\x03\x55\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x02\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x04\x30\x0f\x06\x03\x55\x1d\x13\x01\x01\xff\x04\x05\x30\x03\x02\x01\x01\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04\x14\xd0\xb5\x3a\xe9\x22\xa1\x28\x87\x72\xc6\x97\xd7\xe5\x36\x30\xc7\x1b\x17\x11\xde\x30\x81\xd5\x06\x03\x55\x1d\x23\x04\x81\xcd\x30\x81\xca\x80\x14\x49\x77\x3e\x05\xa4\x94\x6e\x36\xb7\xe5\x14\xa2\x6e\x64\x2d\xd7\x0d\x5e\xa6\x18\xa1\x81\xae\xa4\x81\xab\x30\x81\xa8\x31\x12\x30\x10\x06\x03\x55\x04\x06\x0c\x09\xe4\xb8\xad\xe5\x9b\xbd\x00\x00\x00\x31\x12\x30\x10\x06\x03\x55\x04\x08\x0c\x09\xe5\x8c\x97\xe4\xba\xac\x00\x00\x00\x31\x16\x30\x14\x06\x03\x55\x04\x07\x0c\x0d\xe5\x8c\x97\xe4\xba\xac\xe5\xb8\x82\x00\x00\x00\x00\x31\x36\x30\x34\x06\x03\x55\x04\x0a\x0c\x2d\xe5\x8c\x97\xe4\xba\xac\xe5\xa4\xa9\xe5\x9c\xb0\xe8\x9e\x8d\xe7\xa7\x91\xe6\x8a\x80\xe6\x9c\x89\xe9\x99\x90\xe5\x85\xac\xe5\x8f\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x16\x30\x14\x06\x03\x55\x04\x0b\x0c\x0d\xe6\xb5\x8b\xe8\xaf\x95\xe9\x83\xa8\x00\x00\x00\x00\x31\x16\x30\x14\x06\x03\x55\x04\x03\x0c\x0d\x54\x65\x6e\x2d\x54\x65\x73\x74\x2d\x43\x41\x32\x00\x82\x01\x02\x30\x3c\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x30\x30\x2e\x30\x2c\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x01\x86\x20\x68\x74\x74\x70\x73\x3a\x2f\x2f\x45\x56\x49\x6e\x74\x6c\x2d\x6f\x63\x73\x70\x2e\x74\x65\x6e\x64\x79\x72\x6f\x6e\x2e\x63\x6f\x6d\x30\x40\x06\x03\x55\x1d\x1f\x04\x39\x30\x37\x30\x35\xa0\x33\xa0\x31\x86\x2f\x68\x74\x74\x70\x73\x3a\x2f\x2f\x45\x56\x49\x6e\x74\x6c\x2d\x63\x72\x6c\x2e\x74\x65\x6e\x64\x79\x72\x6f\x6e\x2e\x63\x6f\x6d\x2f\x2f\x45\x56\x49\x6e\x74\x6c\x32\x30\x30\x39\x2e\x63\x72\x6c\x30\x18\x06\x04\x2a\x03\x04\x09\x04\x10\x16\x0e\x49\x20\x6c\x6f\x76\x65\x20\x4f\x70\x65\x6e\x53\x53\x4c\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x03\x82\x01\x01\x00\x8e\xfc\x66\x47\x43\xab\xbf\xf1\x9f\x3e\x9d\xbd\x1f\x38\x3c\x6a\xe9\x15\xbb\x6b\x61\x2a\x0d\xa8\x2e\x54\x29\x38\x09\x6e\xb9\x06\x58\x79\xfa\x19\x6c\x80\xcb\x1c\xf9\x06\x67\xa5\x7c\xe1\xa2\xeb\x7f\xcc\x34\x77\xc0\xa8\x20\x0e\x16\x48\xb1\xdc\xfe\x21\x88\xbc\x2c\x87\xa8\xfc\x61\xae\x56\xf6\x3c\xe7\x9e\xab\x33\xe9\xa6\xb0\x5c\xbb\x91\x77\xba\x70\x77\x7b\xc9\x6f\x9b\xc7\xe5\x76\x5a\x7f\x59\x8c\x14\xa0\x6c\x25\x62\x19\x85\xae\x05\x8e\xd4\x21\x8a\x4d\x47\xbc\x2c\x58\xe1\x44\x58\x26\x2f\xb4\xc2\xa0\x50\x64\xd5\x01\xe8\x4d\x9b\x4e\x48\xb0\x15\xde\xdc\x89\x20\x5b\x67\x18\xb8\xdc\xf3\xa8\x24\x13\xb2\x0f\x9c\xa0\x83\xab\x53\xea\xd5\xaf\xd9\x3a\xa9\xa2\xcd\xca\x1f\x15\x9e\xa3\x60\x0d\x98\x98\x11\x62\xc5\x9f\x42\x90\xd0\x45\x8b\x7d\xff\x44\x5e\x68\x92\x62\xdc\x64\xe7\x66\xe1\x2f\x25\xa2\xc3\xf0\xa7\x94\x7b\x60\x57\x91\xed\xba\xeb\x9c\xf7\x28\x09\xf0\x90\x2f\x4f\x4a\x92\xfb\x06\x9c\x89\x9e\x2f\x32\xdf\x64\x3d\x0a\x20\x51\x5e\xa1\xf9\x85\xe8\xb0\xe9\x49\x30\x7e\x76\x59\x5a\x0a\x25\x9e\x82\x97\x4f\x20\xde\xcf\x59\x7a\x0e\x56";
				dwCertLen = 1330;
	*/
				GetCertPublicKeyN(pbSingleCertData, dwCertLen, baCertPubKeyN, &dwCertPubKeyLen);

				ByteReverse(baCertPubKeyN, dwCertPubKeyLen); // CSP导出的是小端的,证书解析出来的是大端的，把证书的这个逆转成小端的

				if(memcmp(pbRsaPubKeyN, baCertPubKeyN, dwCertPubKeyLen) == 0)
				{
					CryptSetKeyParam(hUserKey, KP_SET_PARENT_HWND, (LPBYTE)&hwnd, 0);

					if( !CryptSetKeyParam(hUserKey, KP_CERTIFICATE, pbSingleCertData, 0) )
					{
						nRetError = CCB_FF_IMPORT_P7_CERT;
						bRet = false;
					}
					else
					{
						nRetError = CCB_ERR_SUCCESS;
						bRet = true;
					}
					bIsExist = true; // 不需要在找其他容器了
				}

			}

			CryptDestroyKey(hUserKey);
			
			CryptReleaseContext(hProvSub, 0);

			if(bIsExist)
			{
				break;
			}
		}

		CryptReleaseContext(hProv,0);

	leave:

		if(pbEncodedBinary)
		{
			delete [] pbEncodedBinary;
		}

		if(hMsg)
		{
			::CryptMsgClose(hMsg);
		}

		if(pbaCertData)
		{
			delete [] pbaCertData;
		}

		if(pnRet)
		{
			*pnRet = nRetError;
		}

		return bRet;
	}

};

#endif