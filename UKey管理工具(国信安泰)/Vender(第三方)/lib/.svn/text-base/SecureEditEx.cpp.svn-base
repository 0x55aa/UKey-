/*
  Copyright (c) 2005-2008, Dominik Reichl <dominik.reichl@t-online.de>
  All rights reserved.
*/
/////////////////////////////////////////////////////////////////////////////
// Version History:
// 2008-06-06: v1.2
// - Added ability to accept text drops
//
// 2005-04-18: v1.1
// - EnableSecureMode now doesn't just clear the control, it converts the
//   entered password
// - Made DeletePassword, SetMemoryEx and DeleteTPtr static public functions
// - Shift-Home and Shift-End don't clear the control any more when being in
//   non-protected mode
//
// 2005-04-17: v1.0
// - First release

#include "StdAfx.h"
#include "SecureEditEx.h"

#include "JunkCode.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define _tcsset_s(p, l, c) _tcsset(p, c)
#define _tcscpy_s(d, l, s) _tcscpy(d, s)

/////////////////////////////////////////////////////////////////////////////
// CSecureEditEx

class CSecurePressKey
{
public:
	CSecurePressKey()
	{
		m_nTickCount = 0;
		m_hWndEdit = NULL;
		m_hKeyboard = NULL;
		m_hKeyboard_LL = NULL;
		m_hHook3 = NULL;
		m_hHook4 = NULL;
		m_hHook12 = NULL;

		m_abNumKeyMap[0] = m_abNumKeyMap[1] = 0;

	}

	bool Start(HWND hWndEdit)
	{
#if(0)
		// 生成键值影射表
		if (m_abNumKeyMap[0] == 0 && m_abNumKeyMap[1] == 0)
		{
			for (int i=0; i<10; i++)
				m_abNumKeyMap[i] = 9-i;
			for (int j=0; j<26; j++)
				m_abCharKeyMap[j] = 25-j;

			::srand(::GetTickCount());
			for (int k=0; k<32; k++)
			{

				int r1 = ::rand() % 10;
				int r2 = ::rand() % 10;
				if ((r1!=m_abNumKeyMap[r2]) && (r2!=m_abNumKeyMap[r1])) // 防止复制为原值
				{
					BYTE bt = m_abNumKeyMap[r1];
					m_abNumKeyMap[r1] = m_abNumKeyMap[r2];
					m_abNumKeyMap[r2] = bt; 
				}

				{
					r1 = ::rand() % 26;
					r2 = ::rand() % 26;
					BYTE bt = m_abCharKeyMap[r1];
					m_abCharKeyMap[r1] = m_abCharKeyMap[r2];
					m_abCharKeyMap[r2] = bt; 
				}
			}
		}
#endif

		if (m_hKeyboard_LL == NULL) // 在Caps提示框点击鼠标按键，会重新激活该窗口
		{
			m_nTickCount = 0;
			m_hWndEdit = hWndEdit;
			m_hKeyboard_LL = ::SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, ::GetModuleHandle(NULL), 0);
			m_hKeyboard = ::SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, ::GetModuleHandle(NULL), ::GetCurrentThreadId());
			m_hHook3 = ::SetWindowsHookEx(WH_GETMESSAGE, CallWndProc, ::GetModuleHandle(NULL), ::GetCurrentThreadId());
			m_hHook4 = ::SetWindowsHookEx(WH_CALLWNDPROC, CallWndProc, ::GetModuleHandle(NULL), ::GetCurrentThreadId());
			m_hHook12 = ::SetWindowsHookEx(WH_CALLWNDPROCRET, CallWndProc, ::GetModuleHandle(NULL), ::GetCurrentThreadId());
		}
		return (m_hKeyboard_LL != NULL);
	}

	bool Stop()
	{
		::UnhookWindowsHookEx(m_hKeyboard_LL);
		m_hKeyboard_LL = NULL;
		::UnhookWindowsHookEx(m_hKeyboard);
		m_hKeyboard = NULL;

		::UnhookWindowsHookEx(m_hHook3);
		m_hHook3 = NULL;
		::UnhookWindowsHookEx(m_hHook4);
		m_hHook4 = NULL;
		::UnhookWindowsHookEx(m_hHook12);
		m_hHook12 = NULL;
		return true;
	}

	bool DoTimer()
	{
		m_nTickCount ++;
		if ((m_nTickCount & 0x03) == 0)
		{
			::UnhookWindowsHookEx(m_hKeyboard_LL);
			m_hKeyboard_LL = ::SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, ::GetModuleHandle(NULL), 0);
		}

		// 有控制键按下
		if ((::GetKeyState(VK_LWIN) & 0x8000) || (::GetKeyState(VK_RWIN) & 0x8000))
		{
			//TRACE("press VK_LWIN[%x] VK_RWIN[%x]\n", ::GetKeyState(VK_LWIN), ::GetKeyState(VK_RWIN) );
			return true;
		}
		if (::GetKeyState(VK_CONTROL) & 0x8000)//CTRL
		{
			//TRACE("press VK_LCONTROL[%x] VK_RCONTROL[%x]\n", ::GetKeyState(VK_LCONTROL), ::GetKeyState(VK_RCONTROL) );
			return true;
		}
		if (::GetKeyState(VK_MENU ) & 0x8000)//ALT
		{
			//TRACE("press VK_LMENU [%x] VK_RMENU [%x]\n", ::GetKeyState(VK_LMENU), ::GetKeyState(VK_RMENU) );
			return true;
		}
#if(0)
		WORD wRand = (::rand() % 62);
		if(wRand >= 0 && wRand <= 9)
			wRand = '0' + wRand;
		else if(wRand >= 10 && wRand <= 35)
			wRand = 'A' + (wRand - 10);
		else if(wRand >= 36 && wRand <= 61)
			wRand = 'a' + (wRand - 36);

		// 模拟按键
		INPUT input;
		input.type = INPUT_KEYBOARD;
		input.ki.wVk = wRand;
		input.ki.wScan = 0xFF; // ::MapVirtualKey(input.ki.wVk, MAPVK_VK_TO_VSC);
		input.ki.dwFlags = 0;
		input.ki.time = 0;
		input.ki.dwExtraInfo = 0;
		::SendInput(1, &input, sizeof(input));

		input.ki.dwFlags = KEYEVENTF_KEYUP;
		::SendInput(1, &input, sizeof(input));
#endif
		return (m_hKeyboard_LL != NULL);
	}

	TCHAR GetChar_Real(TCHAR ch) //  假的 --> 真实
	{
		return ch;
#if(0)
		if (ch >= '0' && ch <= '9')
		{
			ch -= '0';
			for (int i=0; i<10; i++)
			{
				if (m_abNumKeyMap[i] == ch)
					return '0' + i;
			}
		}

		if (ch >= 'A' && ch <= 'Z')
		{
			ch -= 'A';
			for (int i=0; i<26; i++)
			{
				if (m_abCharKeyMap[i] == ch)
					return 'A' + i;
			}
		}

		if (ch >= 'a' && ch <= 'z')
		{
			ch -= 'a';
			for (int i=0; i<26; i++)
			{
				if (m_abCharKeyMap[i] == ch)
					return 'a' + i;
			}
		}
#endif
		return 0;
	}

	TCHAR GetChar_Fake(TCHAR ch) // 真实 --> 假的
	{
#if(0)
		if (ch >= '0' && ch <= '9')
		{
			return '0' + m_abNumKeyMap[ch - '0'];
		}
		else if (ch >= 'A' && ch <= 'Z')
		{
			return 'A' + m_abCharKeyMap[ch - 'A'];
		}
		else if (ch >= VK_NUMPAD0 && ch <= VK_NUMPAD9)
		{
			return '0' + m_abNumKeyMap[ch - VK_NUMPAD0];
		}
#endif
		return ch;
	}

	LPTSTR GetPassword(LPTSTR pszPasswd)
	{
#if (SUPPORT_SECUREKEY_REPLACE)
		for (int i=0; pszPasswd[i]; i++)
		{
			pszPasswd[i] = GetChar_Real(pszPasswd[i]);
		}
#endif
		return pszPasswd;
	}

private:
	BYTE m_abNumKeyMap[10], m_abCharKeyMap[26];
	DWORD m_nTickCount;
	HWND m_hWndEdit;
	HHOOK m_hKeyboard, m_hKeyboard_LL;
	HHOOK m_hHook3, m_hHook4, m_hHook12;
	
	static LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam);
	static LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam);
	static LRESULT CALLBACK CallWndProc(int nCode, WPARAM wParam, LPARAM lParam)
	{
		return FALSE;
	}
};
static CSecurePressKey s_securePressKey;

LRESULT CALLBACK CSecurePressKey::LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)
{
	if ((nCode < 0) || (s_securePressKey.m_hWndEdit == NULL))
	{
		::CallNextHookEx(s_securePressKey.m_hKeyboard_LL, nCode, wParam, lParam);
	}

	KBDLLHOOKSTRUCT * p = (KBDLLHOOKSTRUCT  *)lParam;

	TRACE(TEXT("[LLB] press [%x][%c][%x][%x][%x]\n"), p->vkCode, p->vkCode,p->scanCode,p->flags,p->dwExtraInfo);

	if (p->flags & LLKHF_INJECTED) // injected 虚拟按键
	{
		p->flags = (p->flags & (~LLKHF_INJECTED));
		return ::CallNextHookEx(s_securePressKey.m_hKeyboard_LL, nCode, wParam, lParam);
	}
	else
	{
		DWORD ch = p->vkCode;
		// 有控制键按下
		if (p->flags & LLKHF_ALTDOWN) // ATL
		{
		}
		else if ((::GetKeyState(VK_LWIN) & 0x8000) || (::GetKeyState(VK_RWIN) & 0x8000)) // WIN
		{
		}
		else if (::GetKeyState(VK_CONTROL) & 0x8000) // CTRL
		{
		}
		else if (::GetKeyState(VK_MENU ) & 0x8000) // ATL
		{
		}
		else
		{
			ch = s_securePressKey.GetChar_Fake((TCHAR)(p->vkCode));
		}

		BOOL bResult = TRUE;
#if(0)
		// 有按键替换
		if (ch != p->vkCode)
		{
			// 模拟按键
			INPUT input;
			input.type = INPUT_KEYBOARD;
			input.ki.wVk = (WORD)ch;
			input.ki.wScan = 0xFE; // ::MapVirtualKey(ch, MAPVK_VK_TO_VSC);
			input.ki.dwFlags = (p->flags & LLKHF_UP)? KEYEVENTF_KEYUP : 0;
			input.ki.time = 0;
			input.ki.dwExtraInfo = 0x21;// GetMessageExtraInfo();;
			::SendInput(1, &input, sizeof(input));
			return TRUE;
		}
		else
#endif
		{
			return ::CallNextHookEx(s_securePressKey.m_hKeyboard_LL, nCode, wParam, lParam);
		}
	}
}

LRESULT CALLBACK CSecurePressKey::KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)
{
#ifdef DEBUG
	TRACE("KeyboardProc, nCode=%x, wParam=%x, lParam=%x, %x\n", nCode, wParam, lParam, ::GetMessageExtraInfo());
#endif

	if(wParam == VK_SNAPSHOT)
	{
		HWND h = GetTopWindow(NULL);
		if(OpenClipboard(h))
		{
			EmptyClipboard();
			CloseClipboard();
		}
		return TRUE;
	}

	DWORD dwScanCode = (DWORD)((lParam >> 16) & 0x00FF);
	if (dwScanCode == 0xFE)
	{
		// 发送按键消息
		::PostMessage(s_securePressKey.m_hWndEdit, (lParam & 0xC0000000)? WM_KEYUP : WM_KEYDOWN, s_securePressKey.GetChar_Real((TCHAR)wParam), lParam);
		return TRUE;
	}
	return (dwScanCode == 0xFF); // 定时扰乱按键
}


CSecureEditEx::CSecureEditEx() :
	m_bSecMode(TRUE), m_nOldLen(0), m_pSecDrop(NULL), CEdit()
{
	m_apChars.RemoveAll();

	m_pXorPad = new TCHAR[SE_XORPAD_SIZE];
	ASSERT(m_pXorPad != NULL);
	for(int i = 0; i < SE_XORPAD_SIZE; i++)
		m_pXorPad[i] = static_cast<TCHAR>(rand());
	
	m_nTimer = 0;

	m_nMaxPinLen = 32;
	m_nMinPinLen = 6;
}

CSecureEditEx::~CSecureEditEx()
{
	if(m_pSecDrop != NULL)
	{
		m_pSecDrop->Revoke();
		delete m_pSecDrop;
		m_pSecDrop = NULL;
	}

	_DeleteAll();

	SetMemoryEx(m_pXorPad, 0, SE_XORPAD_SIZE * sizeof(TCHAR));
	DeleteTPtr(m_pXorPad, TRUE, FALSE);
	m_pXorPad = NULL;
}

BEGIN_MESSAGE_MAP(CSecureEditEx, CEdit)
	//{{AFX_MSG_MAP(CSecureEditEx)
	ON_CONTROL_REFLECT(EN_UPDATE, OnEnUpdate)
	ON_WM_KEYDOWN()
	ON_WM_KEYUP()
	ON_WM_CHAR()
	ON_WM_DEADCHAR()
	ON_WM_MOUSEMOVE()
	ON_WM_LBUTTONDBLCLK()
	ON_WM_LBUTTONUP()
	ON_WM_MBUTTONDBLCLK()
	ON_WM_MBUTTONUP()
	ON_WM_RBUTTONDBLCLK()
	ON_WM_RBUTTONUP()
	ON_WM_RBUTTONDOWN()
	ON_CONTROL_REFLECT(EN_SETFOCUS, OnSetFocus)
	ON_WM_SETFOCUS()
	ON_WM_KILLFOCUS()
	ON_WM_TIMER()
	ON_MESSAGE(WM_PAD_KEY_VALUE, OnPadInputKey)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////

void CSecureEditEx::InitEx()
{
	VERIFY(_RegisterDropTarget());
}

void CSecureEditEx::SetPinLen(int max, int min)
{
	m_nMaxPinLen = max;
	m_nMinPinLen = min;
}

LRESULT CSecureEditEx::OnPadInputKey(WPARAM wp, LPARAM lp)
{
	switch(wp)
	{
	case PAD_KEY_CLEAR:
		this->SetWindowText(TEXT(""));
		break;
	case PAD_KEY_BACK:
		break;
	case PAD_KEY_ENTER:
		//::SendMessage(this->GetParent()->GetSafeHwnd(), WM_PAD_ENTER_OR_CANCEL, IDOK, NULL);
		break;
	case PAD_KEY_CAPS:
		break;
	case PAD_KEY_CANCEL:
		//::SendMessage(this->GetParent()->GetSafeHwnd(), WM_PAD_ENTER_OR_CANCEL, IDCANCEL, NULL);
		break;
	default:
		{
#if (SUPPORT_SECUREKEY_REPLACE)
			wp = s_securePressKey.GetChar_Fake((TCHAR)wp);
#endif
			this->ReplaceSel( CString((TCHAR)wp) );
			break;
		}
	}
	this->SetFocus();
	return 0;
}
void CSecureEditEx::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (VK_BACK != nChar && ::isprint(nChar) == 0)
		return ;

	//mod by lrf 只有数字和字母，没有其他字符
	if( !(((nChar >= '0') && (nChar <= '9')) || ((nChar >= 'a' ) && (nChar <= 'z')) || ((nChar >= 'A') && (nChar <= 'Z')) ) && (VK_BACK != nChar) )
		return;

	CEdit::OnChar(nChar, nRepCnt, nFlags);

	if(VK_BACK == nChar )
	{
		int nStart, nEnd;
		this->GetSel(nStart, nEnd);
		this->SetSel(nStart, nEnd, FALSE);
		this->SetFocus();
	}

	_ClearSelection();
}

// Enable or disable the secure mode, default is enabled
void CSecureEditEx::EnableSecureMode(BOOL bEnable)
{
	if(m_bSecMode == bEnable) return; // Nothing to do

	LPTSTR lpSource = GetPassword(); ASSERT(lpSource != NULL);
	ASSERT((int)_tcslen(lpSource) == m_nOldLen);

	_DeleteAll();
	m_bSecMode = bEnable;

	if(lpSource != NULL)
	{
		m_nOldLen = (int)_tcslen(lpSource);

		if(bEnable == FALSE) SetWindowText(lpSource);
		else
		{
			if(m_nOldLen != 0)
			{
				_InsertCharacters(0, lpSource, (unsigned int)m_nOldLen);
				_tcsset_s(lpSource, m_nOldLen + 1, TCH_STDPWCHAR);
			}

			SetWindowText(lpSource);
		}
	}

	DeletePassword(lpSource); lpSource = NULL;
}

BOOL CSecureEditEx::IsSecureModeEnabled()
{
	return m_bSecMode;
}

// Securely erase and free all memory
void CSecureEditEx::_DeleteAll()
{
	// Securely free the password characters
	for(int i = 0; i < m_apChars.GetSize(); ++i)
	{
		LPTSTR lp = (LPTSTR)m_apChars.GetAt(i);
		DeleteTPtr(lp, FALSE, FALSE);
	}

	m_apChars.RemoveAll(); // Delete all character pointers
	m_nOldLen = 0;
}

// Wrapper around the memset function
void CSecureEditEx::SetMemoryEx(void *pDest, int c, size_t uCount)
{
	ASSERT(pDest != NULL); if(pDest == NULL) return;
	if(uCount == 0) return;

	memset(pDest, c, uCount);
}

// Allocates memory that can be freed by DeleteTPtr
LPTSTR CSecureEditEx::AllocMemory(size_t uCount)
{
	return new TCHAR[uCount];
}

// Securely erase and free a string/pointer
void CSecureEditEx::DeleteTPtr(LPTSTR lp, BOOL bIsArray, BOOL bIsString)
{
	ASSERT(lp != NULL);

	if(lp != NULL)
	{
		if(bIsString == FALSE) *lp = 0;
		else SetMemoryEx(lp, 0, _tcslen(lp) * sizeof(TCHAR));

		if(bIsArray == FALSE) delete lp;
		else delete []lp;

		lp = NULL;
	}
}

// Retrieve the currently entered password
LPTSTR CSecureEditEx::GetPassword()
{
#ifdef _M_IX86
	JUNK_CODE_JMP5(0xb1, 0xf4, 0xf2, 0xd5, 0xdb);
#endif
	if(m_bSecMode == TRUE)
	{
		ASSERT(GetWindowTextLength() == m_apChars.GetSize()); // Sync failed?
	}

	if(m_bSecMode == FALSE)
	{
		const int nPlainChars = GetWindowTextLength();
		LPTSTR lpNew = new TCHAR[nPlainChars + 1];
		ASSERT(lpNew != NULL); if(lpNew == NULL) return NULL;
		GetWindowText(lpNew, nPlainChars + 1);
		return s_securePressKey.GetPassword(lpNew);
	}

	const int nNumChars = static_cast<int>(m_apChars.GetSize());

	LPTSTR lp = new TCHAR[nNumChars + 1];
	ASSERT(lp != NULL); if(lp == NULL) return NULL;

	for(int i = 0; i < nNumChars; ++i)
	{
		// Get one character
		LPTSTR tchp = (LPTSTR)m_apChars.GetAt(i);
		ASSERT(tchp != NULL); if(tchp == NULL) continue;

		lp[i] = (TCHAR)((*tchp) ^ m_pXorPad[i % SE_XORPAD_SIZE]); // Decrypt
	}

	lp[nNumChars] = 0; // Terminate string
#ifdef _M_IX86
	JUNK_CODE_JMP5(0xa5, 0xa3, 0xf3, 0x8a, 0xce);
#endif
	return s_securePressKey.GetPassword(lp);
}

// Free a password returned by GetPassword()
void CSecureEditEx::DeletePassword(LPTSTR lpPassword)
{
	DeleteTPtr(lpPassword, TRUE, TRUE);
}

// Set the currently entered password, may be NULL
void CSecureEditEx::SetPassword(LPCTSTR lpPassword)
{
	_DeleteAll();

	if(m_bSecMode == FALSE)
	{
		if(lpPassword != NULL) SetWindowText(lpPassword);
		else SetWindowText(TEXT(""));

		return;
	}

	if(lpPassword != NULL)
	{
		unsigned int uLen = (unsigned int)_tcslen(lpPassword);
		if(uLen != 0) _InsertCharacters(0, lpPassword, uLen);

		size_t sizeTempBuffer = uLen + 1;
		LPTSTR tszBuf = new TCHAR[sizeTempBuffer];
		ASSERT(tszBuf != NULL);
		if(tszBuf != NULL)
		{
			_tcscpy_s(tszBuf, sizeTempBuffer, lpPassword);
			_tcsset_s(tszBuf, sizeTempBuffer, TCH_STDPWCHAR);
			m_nOldLen = (int)_tcslen(tszBuf);
			ASSERT(m_nOldLen == (int)uLen);
			SetWindowText(tszBuf);

			delete []tszBuf; tszBuf = NULL;
		}
		else SetWindowText(TEXT(""));
	}
	else SetWindowText(TEXT(""));
}

// Called *after* the content of the edit control has been updated!
void CSecureEditEx::OnEnUpdate() 
{
	_RegisterDropTarget();

	if(m_bSecMode == FALSE)
	{
		m_nOldLen = GetWindowTextLength();
		return;
	}

	// Get information about the *new* contents of the edit control
	const int iWndLen = GetWindowTextLength();
	const int iDiff = iWndLen - m_nOldLen;

	if(iDiff == 0) return; // No change?

	const size_t sizeWindowBuffer = iWndLen + 1;
	LPTSTR lpWnd = new TCHAR[sizeWindowBuffer];
	ASSERT(lpWnd != NULL); if(lpWnd == NULL) return;
	GetWindowText(lpWnd, iWndLen + 1);
	DWORD dwPos = (GetSel() & 0xFFFF); // Get the *new* cursor position

	if(iDiff < 0)
	{
		//ASSERT(iDiff == -1);
		_DeleteCharacters(dwPos, static_cast<unsigned int>(-iDiff));
	}
	else
	{
		if (dwPos < (DWORD)iDiff)
			dwPos = iWndLen; // test
		_InsertCharacters(dwPos - static_cast<DWORD>(iDiff), &lpWnd[dwPos -
			static_cast<DWORD>(iDiff)], static_cast<unsigned int>(iDiff));
	}

	ASSERT(m_apChars.GetSize() == iWndLen);

	m_nOldLen = static_cast<int>(m_apChars.GetSize());
	_tcsset_s(lpWnd, sizeWindowBuffer, TCH_STDPWCHAR);
	SetWindowText(lpWnd);
	SetSel(static_cast<int>(dwPos), static_cast<int>(dwPos), FALSE);
	DeleteTPtr(lpWnd, TRUE, FALSE); // Memory overwritten already
}

void CSecureEditEx::_ClearSelection()
{
	if(m_bSecMode == FALSE) return;

	int nStart, nEnd;
	GetSel(nStart, nEnd);
	if(nStart != nEnd) SetSel(nStart, nStart, FALSE);
}

void CSecureEditEx::_InsertCharacters(unsigned int uPos, LPCTSTR lpSource, unsigned int uNumChars)
{
	ASSERT(lpSource != NULL); if(lpSource == NULL) return;
	ASSERT(uNumChars != 0); if(uNumChars == 0) return;

	ASSERT(uPos <= static_cast<unsigned int>(m_apChars.GetSize() + 1));
	if(uPos > static_cast<unsigned int>(m_apChars.GetSize() + 1)) return;

	_EncryptBuffer(FALSE);

	const bool bAppend = (uPos == static_cast<unsigned int>(m_apChars.GetSize()));
	for(unsigned int i = 0; i < uNumChars; ++i)
	{
		LPTSTR lp = new TCHAR;
		ASSERT(lp != NULL); if(lp == NULL) continue;

		*lp = lpSource[i];

		if(bAppend) m_apChars.Add(lp);
		else m_apChars.InsertAt(static_cast<int>(uPos + i), lp, 1);
	}

	_EncryptBuffer(TRUE);
}

void CSecureEditEx::_DeleteCharacters(unsigned int uPos, unsigned int uCount)
{
	int i;

	ASSERT((uPos + uCount) <= (unsigned int)m_apChars.GetSize());
	if((uPos + uCount) > (unsigned int)m_apChars.GetSize()) return;

	_EncryptBuffer(FALSE); // Unlock buffer

	// Free the memory (erases the characters before freeing them)
	for(i = 0; i < (int)uCount; i++)
		DeleteTPtr((LPTSTR)m_apChars.GetAt((int)uPos + i), FALSE, FALSE);

	m_apChars.RemoveAt((int)uPos, (int)uCount); // Remove pointers

	_EncryptBuffer(TRUE); // Lock buffer again
}

void CSecureEditEx::_EncryptBuffer(BOOL bEncrypt)
{
#ifdef _M_IX86
	JUNK_CODE_JMP5(0xa5, 0xa3, 0xf3, 0x8a, 0xce);
#endif	
	// XOR encryption is self-inverting; no separation of encryption
	// and decryption code needed
	UNREFERENCED_PARAMETER(bEncrypt);

	for(int i = 0; i < m_apChars.GetSize(); i++)
	{
		LPTSTR tchp = (LPTSTR)m_apChars.GetAt(i);
		ASSERT(tchp != NULL); if(tchp == NULL) continue;

		*tchp ^= m_pXorPad[i % SE_XORPAD_SIZE];
	}

#ifdef _M_IX86
	JUNK_CODE_JMP5(0xa5, 0xa3, 0xf3, 0x8a, 0xce);
#endif	
}

void CSecureEditEx::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) 
{
	if(m_bSecMode == TRUE)
	{
		if((nChar == VK_HOME) || (nChar == VK_END))
		{
			SHORT shShift = GetKeyState(VK_SHIFT);
			shShift |= GetKeyState(VK_LSHIFT);
			shShift |= GetKeyState(VK_RSHIFT);

			if((shShift & 0x8000) != 0)
			{
				_DeleteAll();
				SetWindowText(TEXT(""));
				SetSel(0, 0, FALSE);
			}
		}
	}

	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);
	_ClearSelection();
}

void CSecureEditEx::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags) 
{
	CEdit::OnKeyUp(nChar, nRepCnt, nFlags);
	_ClearSelection();
}

void CSecureEditEx::OnDeadChar(UINT nChar, UINT nRepCnt, UINT nFlags) 
{
	CEdit::OnDeadChar(nChar, nRepCnt, nFlags);
	_ClearSelection();
}

void CSecureEditEx::OnMouseMove(UINT nFlags, CPoint point) 
{
	CEdit::OnMouseMove(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnLButtonDblClk(UINT nFlags, CPoint point) 
{
	CEdit::OnLButtonDblClk(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnLButtonUp(UINT nFlags, CPoint point) 
{
	CEdit::OnLButtonUp(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnMButtonDblClk(UINT nFlags, CPoint point) 
{
	CEdit::OnMButtonDblClk(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnMButtonUp(UINT nFlags, CPoint point) 
{
	CEdit::OnMButtonUp(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnRButtonDblClk(UINT nFlags, CPoint point) 
{
	CEdit::OnRButtonDblClk(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnRButtonUp(UINT nFlags, CPoint point) 
{
	CEdit::OnRButtonUp(nFlags, point);
	_ClearSelection();
}

void CSecureEditEx::OnRButtonDown(UINT nFlags, CPoint point) 
{
	//CEdit::OnRButtonDown(nFlags, point);
	//_ClearSelection();
}

void CSecureEditEx::OnSetFocus() 
{
	_ClearSelection();
}

BOOL CSecureEditEx::_RegisterDropTarget()
{
	if(m_pSecDrop == NULL)
	{
		m_pSecDrop = new CSecureDropTarget(this);
		if(m_pSecDrop != NULL) return m_pSecDrop->Register(this);
	}

	return FALSE;
}

void CSecureEditEx::_Paste(LPCTSTR lpSource)
{
	ASSERT(lpSource != NULL); if(lpSource == NULL) return;
	ASSERT(lpSource[0] != 0); if(lpSource[0] == 0) return;

	ReplaceSel(lpSource, FALSE);
}

CSecureDropTarget::CSecureDropTarget(CSecureEditEx* pControl) :
	m_pControl(pControl), COleDropTarget()
{
}

DROPEFFECT CSecureDropTarget::OnDragEnter(CWnd* pWnd, COleDataObject* pDataObject,
	DWORD dwKeyState, CPoint point)
{
	return this->OnDragOver(pWnd, pDataObject, dwKeyState, point);
}

DROPEFFECT CSecureDropTarget::OnDragOver(CWnd* pWnd, COleDataObject* pDataObject,
	DWORD dwKeyState, CPoint point)
{
	ASSERT(m_pControl != NULL); if(m_pControl == NULL) return DROPEFFECT_NONE;
	ASSERT(pWnd == m_pControl); if(pWnd != m_pControl) return DROPEFFECT_NONE;
	ASSERT(pDataObject != NULL); if(pDataObject == NULL) return DROPEFFECT_NONE;

	UNREFERENCED_PARAMETER(dwKeyState);
	UNREFERENCED_PARAMETER(point);

	BOOL bHasFormat = FALSE;
	bHasFormat |= pDataObject->IsDataAvailable(CF_OEMTEXT, NULL);
	bHasFormat |= pDataObject->IsDataAvailable(CF_TEXT, NULL);
	bHasFormat |= pDataObject->IsDataAvailable(CF_UNICODETEXT, NULL);

	return ((bHasFormat != FALSE) ? DROPEFFECT_COPY : DROPEFFECT_NONE);
}

BOOL CSecureDropTarget::OnDrop(CWnd* pWnd, COleDataObject* pDataObject,
	DROPEFFECT dropEffect, CPoint point)
{
	ASSERT(m_pControl != NULL); if(m_pControl == NULL) return DROPEFFECT_NONE;
	ASSERT(pWnd == m_pControl); if(pWnd != m_pControl) return FALSE;
	ASSERT(pDataObject != NULL); if(pDataObject == NULL) return FALSE;

	UNREFERENCED_PARAMETER(dropEffect);
	UNREFERENCED_PARAMETER(point);

	if(pDataObject->IsDataAvailable(CF_UNICODETEXT, NULL) != FALSE)
	{
		HGLOBAL hUni = pDataObject->GetGlobalData(CF_UNICODETEXT, NULL);
		if(hUni == NULL) { ASSERT(FALSE); return FALSE; }

		LPCWSTR lpUni = (LPCWSTR)GlobalLock(hUni);
		if(lpUni == NULL) { ASSERT(FALSE); return FALSE; }

		CW2CT strText(lpUni);
		m_pControl->ReplaceSel(strText, FALSE);

		GlobalUnlock(hUni);
	}
	else if((pDataObject->IsDataAvailable(CF_TEXT, NULL) != FALSE) ||
		(pDataObject->IsDataAvailable(CF_OEMTEXT, NULL) != FALSE))
	{
		HGLOBAL hAnsi = pDataObject->GetGlobalData(CF_TEXT, NULL);
		if(hAnsi == NULL) hAnsi = pDataObject->GetGlobalData(CF_OEMTEXT, NULL);
		if(hAnsi == NULL) { ASSERT(FALSE); return FALSE; }

		LPCSTR lpAnsi = (LPCSTR)GlobalLock(hAnsi);
		if(lpAnsi == NULL) { ASSERT(FALSE); return FALSE; }

		CA2CT strText(lpAnsi);
		m_pControl->ReplaceSel(strText, FALSE);

		GlobalUnlock(hAnsi);
	}
	else return FALSE;

	return TRUE;
}


void CSecureEditEx::OnSetFocus(CWnd* pOldWnd)
{
	CEdit::OnSetFocus(pOldWnd);

	GetParent()->SendMessage(WM_PAD_EDIT_SETFOCUS, 0, (LPARAM)GetSafeHwnd());

	s_securePressKey.Start(this->GetSafeHwnd());
	if (m_nTimer == NULL)
	{
		m_nTimer = SetTimer(1, 500, NULL);
	}
}

void CSecureEditEx::OnKillFocus(CWnd* pNewWnd)
{
	CEdit::OnKillFocus(pNewWnd);
	if (this->GetFocus()->GetSafeHwnd() != this->GetSafeHwnd()) // 窗口确实失去焦点
	{
		KillTimer(m_nTimer);
		m_nTimer = NULL;

		s_securePressKey.Stop();
		TRACE(TEXT("s_securePressKey::Stop\n"));
	}
}

void CSecureEditEx::OnTimer(UINT_PTR nIDEvent)
{
	s_securePressKey.DoTimer();

	CEdit::OnTimer(nIDEvent);
}
